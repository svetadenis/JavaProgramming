Office Hours Topics:

    reviewing week 13:
    Abstraction

----------------------------------------------------------------------------------------

Shopping [Abstraction]

    create an abstract class Shopping
        - Declare two abstract methods:
            buyItem(), returnItem()

    create an interface Shipping
        - Declare an abstract methods:
            shipItem()

    create a concrete class Target
        - Make the class final
        - Inherit Shopping and implement Shipping
        - implement all abstract methods

    create an abstract class OnlineShopping
        - Inherit Shopping and implement Shipping
        - Does not need to implement any abstract methods
        - Declare an abstract methods:
            viewCart()

    create a concrete class Amazon
        - Make the class final
        - Inherit OnlineShopping and implement all abstract methods

    create an interface AllowUsersToSell
        - Declare an abstract method:
            uploadProduct()

    create a concrete class EBay
        - Make the class final
        - Inherit OnlineShopping and implements interface AllowUsersToSell interface
        - Implement all abstract methods

    create a class Warehouse
    create a main method and create Target, Amazon, & EBay object to test the methods

----------------------------------------------------------------------------------------

Building Part 1 [abstraction, inheritance]

    - Create an abstract class Building

        create instance variables:
            String location
            double price

        create abstract methods:
            void pay()

        create a constructor to assign the location & price

        override the toString to print the location & price

    - Create an interface HasElevator
        abstract method:
            void elevator(int floor)

    - Create an interface HasBalcony
        abstract method:
            void openBalcony()

    - Create an interface HasBackyard
        abstract method:
            void mowLawn()

    - Create an class House
        child class of Building
        implements HasBackyard

        create instance variable
            int number of residents

        create a constructor to assign the location, price, and number of residents

        implement all abstract methods (give some print statements. Ex: Paying for House, or Going into Backyard)

        override the toString to print the location, price, and number of residents

    - Create an class Apartment
        child class of Building
        implements HasBalcony

        create instance variable
            int months of lease

        create a constructor to assign the location, price, and months of lease

        implement all abstract methods (give some print statements)

        override the toString to print the location, price, and months of lease

    - Create an class OfficeBuilding
        child class of Building
        implements HasElevator

        create instance variable
            int number of floors

        create a constructor to assign the location, price, and number of floors

        implement all abstract methods (give some print statements)

        override the toString to print the location, price, and number of floors

----------------------------------------------------------------------------------------

WebElements [Abstraction, interface focused, automation idea]

create an interface WebElement
    abstract methods:
        getText()

create an interface Clickable
    abstract methods:
        click()

create an interface Input
    abstract methods:
        sendKeys()

create a class Button
    implement the WebElement & Clickable interfaces
    override all abstract methods

create a class Link
    implement the WebElement & Clickable interfaces
    override all abstract methods

create a class InputField
    implement he WebElement, Clickable & Input interfaces
    override all abstract methods

create a class Website with a main method and define different objects of Button, Link, and InputField to test the code

----------------------------------------------------------------------------------------

Armstrong [IQ][problem solving]

    Create a method to check if a number is an Armstrong number
        parameter: int
        return: boolean

    An Armstrong number is a number that's digits can be raised to the power of the total number of digits and summed to equal the original number
        -> these numbers are also called narcissistic numbers

        Ex:
            input: 153
            output: true

            the digits are 1, 5, and 3
            the calculation would be:
            1^3 + 5^3 + 3^3
                -> why is the exponent 3? because there is 3 digits in the number

            1^3 = 1 * 1 * 1 = 1
            5^3 = 5 * 5 * 5 = 125
            3^3 = 3 * 3 * 3 = 27

            1 + 125 + 27 = 153 --> the sum is equal to the original number so it is an Armstrong number

        Test data:
            153 -> true
            371 -> true
            9474 -> true
            9475 -> false
            123 -> false

----------------------------------------------------------------------------------------

* Make sure our application is working as expected

        * Expected Status (comes from requirements -- clients, customers, laws regulations
         for Bank : customer, bank workers, competing with other apps in the market )

         * Actual Status : real situation of your app

         Compare expected VS actual  -----  Verification

         Not just finding the bug

         more than this : Making sure your application has the Quality expected

         Developers Code are reviewed by their piers.

         We look at the end product


 When testing we have some preconditions and post conditions

 Parent Test Class (usually abstract) : this class has pre-post cond.
 Other Test Classes EXTENDS to parent test class

 --- This structure makes sure that all pre and post cond are run before test classes

   How did you use Inheritance and Abstraction in your framework

when you enable git in the project all files will turn into red  ( they are not added to staging)
add    ----- commit   ---- push