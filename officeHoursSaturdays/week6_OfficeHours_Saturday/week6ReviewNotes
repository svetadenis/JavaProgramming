11/18/2023

Week 5
Day12 - Custom Methods Intro

Week 6
Day13 - Custom Methods Continue
Day14 - Method Overloading, Loops Intro
Day15 - Loops Continue
__________________________________________________________________

methods
return types
parameters/arguments
method overloading
loops
__________________________________________________________________

Avengers: starting next week  - optional practice sessions
	when: Mondays @ 1 pm EST
	who: Arthur
	what: even more extra practice coding. We will go through codingbat tasks
	how: even slower pace then class, reviews, or office hours. These sessions are to practice coding more and will not follow the class topics since it will be practicing the ideas we have already talked about

	- You should have a different join link. Contact support if you do not
	- Everything related to Avengers will be in a separate course on the LMS
__________________________________________________________________

Methods

	methods are important for programming. They help you create reusable code

	We have used some built in methods:
		String methods, Scanner methods

	We can also make our own custom methods
		We can write some code/some action one time and call it anywhere in the project
__________________________________________________________________

Return type

	void: runs some code and nothing is returned from the method
	return type: runs some code and returns a single value back

	if a method defines a return type instead of void, then there MUST be a return value.
		-> The return value is given using the 'return' keyword

	when calling a return method it is up to you how you will use the return value
__________________________________________________________________

Parameters/arguments

    parameters are information needed for a method to run. That information is used in the method
        you can define as many parameters as needed

    Q: What is the difference between parameter and argument
            parameter: the variables declared and used in the method

            argument: the value given when calling a method

                Ex: String method: charAt(int index){}
                    	int index -> parameter
                    when calling: charAt(0)
                    	0 -> argument
__________________________________________________________________

Method overloading

	method has the same name, but different parameters (parameter datatypes can be changed or the number of parameters)

		-> allow us to have different methods that share a similar idea and work with different inputs
			+ readability
			+ re-usability

        one example we have seen:
            substring(num)
            substring(num, num)

            We use substring two ways, with one number parameter, or with two number parameters
            These methods are overloaded so it has the same name but different ways to use the methods

        return type DOES NOT overload your method

        you need to overload the method by changing the parameters
            -> BUT IF the method is overloaded THEN you can change the return type
                -> Return type can be the same or different if overloaded

	IQ: Can you overload a main method?
		Yes, we can add a new method with name main, and have different parameters, but it will not act as the normal main method
__________________________________________________________________

loops

    Loops in programming are used to repeat statements
        You can define some action/code that you want to execute repeatedly

    iteration: each cycle of the code, each time the statements execute

    infinite loop: a loop that continues execute without stopping. A loop will be infinite if the boolean expression is always true and never changes to false

	for loop: loop that is used when there is a fixed number of iterations

        for(initialization; boolean expression; update){
            // statements
        }

        flow:
        	1) initialization
        	2) boolean is checked: true = loop runs, false = loop stops
        	3) statements are run
        	4) update
        	one iteration finished, now it repeats from steps 2-4

	while loop: loop that is used when the the number of iterations is not known and based on a boolean expression

        while(boolean_expression){
            // statements
        }

        flow:
           	1) boolean is checked: true = loop runs, false = loop stops
           	2) statements are run
           	one iteration finished, now it repeats from step 1
__________________________________________________________________

branching statements

    break statement in loop:
        stops and exits the loop

    continue statement in loop:
        it will skip the rest of the iteration and goes to the update part
        any code after continue will not run for that iteration

System.exit(0): terminates the current program, terminates the JVM
