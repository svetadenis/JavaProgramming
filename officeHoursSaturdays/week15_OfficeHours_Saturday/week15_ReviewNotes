Week 15
Day38 - Exception Handling Continue
Day39 - Collection
Git Day 1 - Git, Github, Commit, Push, Pull
Git Day 2 - Branching, Merge, Pull Request, Clone
__________________________________________________________________

throw vs throws
Collection framework
List
Set
Thread & Synchronization

Git & GitHub
Local Flow
Connect to remote
Downstream Flow
Reset commit
Branching
Pull Request
Merge Conflict
__________________________________________________________________

throw vs throws

    throws: keyword that allows you to ignore an exception

        this is NOT handling the exception, but it allows you to compile

        	-> if you use throws you are accepting that an exception can happen

        used in the method signature line
        syntax:
        	method() throws Exception {}
        Ex:
        	public static void main(String[] args) throws InterruptedException{ }

    throw: causes an exception to happen, must throw an Exception type object
    	syntax:
    		throw new ExceptionObject();

        Ex:
        	throw new IllegalArgumentException();
__________________________________________________________________

Collection Framework

    group of interface and classes which define and implement different algorithms for working with data. These collections are data structures that will store, remove, and get data in different ways

    The collection framework is created with inheritance, abstraction, and polymorphism

Main interface of the framework

    Collection: the parent of the Collection types. Defines the main functions of a collection
        ex: add, remove, size

    List: ordered(index), allows duplicates

    Set: unordered(no indexes), does not allow duplicates

    Queue: typically FIFO (First In First Out) order
        * not always FIFO, depends on the class implementing

        Deque: an interface that allows access to elements from the beginning or end
    child of the Queue interface

    ------------------------------------------------------------------------

    Q: What is the difference between Collection and Collections

        Collection: the main/parent interface in the Collection Framework

        Collections: a utility class that has some useful methods for collection types
            sort, max, frequency

    ------------------------------------------------------------------------

    What is the advantage of the collection framework

        the different data structures have different implementations of algorithms to solve the problems of working with data

            Ex: add()
                defined in Collection interface
                abstract

                ArrayList: add element to to the end of internal array
                LinkedList: create a new node and the tail will have the reference of the new node

        performance:
            because a certain data structure focuses on one idea it will be able to perform that idea(functionality) efficiently

            adding, removing, searching

        *** Even though there is many collections types, often developers and testers need to only use List or Map types

    ------------------------------------------------------------------------

    What is the benefit of the Polymorphic reference

        references, especially the interface reference allows an object to be flexibly used in methods, constructors, data structures

            new ArrayList<>(Collection c) -> any object that implements the Collection interface can be given as the argument

            public static void m(List<Integer> nums){}
            public static List<Integer> m(){}

            addAll(Collection c)

    ------------------------------------------------------------------------

    Thread & Synchronization

        process: execution instance of a program

        thread: a sequence of execution within process

        synchronization: multiple threads cannot access at the same time
            - also known as thread-safe
            - if multiple threads did try to access a synchronized field they would need to access one at a time

        advantage: thread-safe
        disadvantage: slower

        Ex: multiple people accessing ATM

    ------------------------------------------------------------------------
__________________________________________________________________

Classes that implement List:

    ArrayList: data structure that uses arrays internally. Re-sizeable array
        useful to storing and reading information

    LinkedList: data structure that uses nodes internally.
        also implements Deque -> doubly linked

        useful to manipulate the collection. adding or removing is handled efficiently

        Node: an object that has the value, reference to the node before it and reference to node after it

    Vector: legacy version of ArrayList. it is synchronized
    	if you needed a synchronized collection you can use Collections.synchronizedList()

        Stack: sub class of Vector. Notes below

    ------------------------------------------------------------------------

Classes that implement Set:

    HashSet: follows a Hashing algorithm, which means handles data fast and efficiently
        data structure that uses HashMap internally (talk about this later)

        the order is basically random

    LinkedHashSet(): data structure that uses HashTable and LinkedList implementations
        the insertion order is maintained

    -> Interface: SortedSet extends Set

    TreeSet: implements the SortedSet
        Elements are stored in the natural order(sorted order, smallest to largest, lexicographical)
        null is not allowed

    ------------------------------------------------------------------------
__________________________________________________________________

================================================================================================

Git & GitHub

	git: version control system

	GitHub: online platform that hosts our remote repositories

	local repository: folder on your computer that keeps track of the changes
	 (hidden .git folder)

	remote repository: folder online that keeps track of the changes, this is where others can also share their changes
		-> we are using GitHub to host these repositories [GitHub.com](http://github.com)

	un-versioned file: not being kept track of

	clone: create a copy of a remote repository to your local computer
		go to the remote repository on github
		click the green code button and copy the given https link
		in intelliJ go to file -> new -> project from version control
		paste the url
__________________________________________________________________

Local Flow (Upstream: local -> remote)

	New project --> java project -> B30GitReview --> finish

	VCS -> Enable Version Control Integration
		(creating the local repository)

	Create git ignore

	- .gitignore: has the ability to ignore, or not track changes of, certain files or folders

		Note: You can not un-track a file already been tracked using .gitignore file. That's why the .gitignore file is usually created in the beginning of the project. If you need to untrack a file and ignore it you will need to run a command (we will talk about the commands later)

			files that are often ignored in a java project:
				.idea
				out
				*.iml

		Option 1) right click on project -> new -> file -> .gitignore

		Option 2) you select the file/s you want to add to git ignore -> right click on the files -> git -> add to gitignore

	Add some files or make changes

	- commit: saving your changes to the local repository
		changes in files
		commit message (what changes were made)
		the author (who made the commit)

	Q: Where are the changes? Are they on the remote yet?

__________________________________________________________________

Connect to remote

Sharing the project

	Sharing by going to git -> github -> share on github

		- creates a remote repository on github
		- link our project with the remote repository
		- push the changes so far

	or manually:

		- go to github.com -> repositories
		- create a new repository
		- take the link from github, then go to intelliJ, go to git -> manage remotes -> click the plus icon -> add the url
		- push the commits

	- push: sending the commits(changes) from our local repository to our remote repository

practice flow of commit & push (local -> remote)
		create a new package if needed (not tracked)
		create a new file
		commit that file
		create another new file
		commit that file
		push all changes to the remote
__________________________________________________________________

Downstream Flow (remote -> local)

	our local projects need to always be updated to be the same as the remote, so we should always get new changes to our projects before trying to share any of our own changes

	fetch: will bring the commit data without merging the changes into the project

	update: gets the new changes for that branch

	pull: more functionality to control which branch you pull from and to
		does the fetching and merge at the same time

practice flow of updating the project (remote -> local )
		go to the project on github
		manually add a file on github - to simulate someone else making the change, we can do proper team collaboration in next classes
		commit that file on the bottom of the page

		locally test fetching, to see the information, and then update our project to get the changes
__________________________________________________________________

Reset
	Right click on the commit you want to go back to and select Reset Current Branch to Here

	Git Reset options:
		Soft: file doesn't update, but changes are staged automatically
		Mixed: file doesn't update, but changes are not staged automatically
		Hard: file will lose all changes until the selected commit

	Revert vs Reset:
		Revert is for pushed commits, history is preserved
			creates new commit undoing the changes

		Reset is for local commits. The history is changed
			moves the head back to the commit
__________________________________________________________________

Branching

	Branching in git is like opening a new timeline for new changes without any impact to the original
		+ light weight & easy to create

	checkout: switch the branch/ move the HEAD

	HEAD: current branch you are looking at

	Merge: Combine changes from branches together

Practice flow with branches

	right click on the master branch -> new branch from master
	make sure you also checkout to the new branch
	make new changes + commit
	pushed from my local name branch to a new origin name branch
	go to github and create a pull request to merge our origin name branch to origin master branch
	merge the branches
__________________________________________________________________

Pull Request

	What is a pull request: a step between merging branches to allow review of the changes

	in real project, you cannot directly merge branches, there needs to be some kind of review process, based on company practices it might change but for example at least 2 people needs to review before merging. Pull requests can help with this process

	1) go to remote repository
		find the pull request menu
		create a new pull request
			master(base) <- name branch (compare)
				compare/merge the changes in the name branch to the master branch

		assign a reviewer and they will comment, discuss, and then approve changes

		after pull request is approved the branches are merged

	2) changes are often detected by GitHub so most of the time you will see a suggestion to make a pull request after a push

__________________________________________________________________

Merge Conflict

	Merge conflict occur when trying to merge but there is some difference between branches or repositories

	What's the best way to handle conflicts?
		Avoid them

		But if a conflict occurs we need to compare the two files and resolve it. IntelliJ has a good UI window to resolve conflicts

		accept yours					result 				accept theirs

		// html for cart page								// team members line

		3 options to resolve the conflict
			you accept your changes
			you accept their changes
			fix the conflict in the middle with mix of the code + merge
__________________________________________________________________