Office Hours Topics:

    reviewing week 15:
    Exceptions: throws, throw custom exception
    Collections
    Git Practice (day 1 & day 2)

----------------------------------------------------------------------------------------

Exceptions

Create a class NonResidentException
    make this a unchecked exception  = runtimeexception

    create a constructor to accept the String argument and pass it to the super constructor

 Create a class FailToCheckOutException
    make this a checked exception

    create a constructor to accept the String argument and pass it to the super constructor

Create a class Library

    create a method getLibraryCard(String city)
5
        if the city is Fairfax or McLean print Library Card Created

        but if it is any other city throw your NonResidentException
            -> give a message in the constructor call

    create a method borrow(boolean checkedOut)

        if the given checkedOut boolean is true print "Enjoy reading"

        but if the boolean is false throw your FailToCheckOutException

        -> handle this exception in the runner file

Create a class to run the code by calling the methods and seeing the result with different inputs to see how the exceptions were related to the execution

    ------------------------------------------------------------

    Collections Framework
    interfaces: Collection List, Set
    Threads & Synchronization

    Collection: the parent of the Collection types. Defines the main functions of a collection

    List: ordered(index), allows duplicates

    Set: unordered(no indexes), does not allow duplicates

    synchronization(thread safe): multiple threads cannot be accessed at the same time

    Interview Task for Collection :  write a program that can move all the zeros to the end of the List of integers

----------------------------------------------------------------------------------------

Git Practice Steps
    we will go through these steps to review how to use git

    [Set up the project]
        create a new java project
        enable VCS
        create gitignore file
        create a file First
        add some random code to the file
        commit the First file and the gitignore file
        share the project
        verify the project is created on GitHub

    [Using branches & PR]
        create a new branch called feature-a
        checkout to feature-a
        make new changes in a new file or existing file
        commit the changes
        push the changes to the origin feature-a
        create a pull request to merge change from feature-a to master

    [Downstream flow]
        on github create changes directly to a file on the master branch to simulate someone on the team making changes
        commit the changes
        back in intellij fetch the changes
        update the local master with the changes
        merge the changes from the local master to local feature-a

    repeat steps:
        update local project
        merge new changes to active the branch
        make changes update the remote with new changes
        make PR to master

----------------------------------------------------------------------------------------

    Data Structures : classes, interfaces part Collections, they hold multiple Data
    Array
    ArrayList
    LinkedList
    Set